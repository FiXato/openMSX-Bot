#!/usr/bin/env ruby
# encoding: utf-8
require 'cinch'
require 'feedzirra'
require 'yaml'
require 'nokogiri'
require 'timeout'
require 'open-uri'
require_relative 'cinch_ext.rb'
include CinchExt
#   <title><![CDATA[m9710797 committed revision 12894 to the openMSX SVN repository, changing 2 files]]></title>
#   <link>http://openmsx.svn.sourceforge.net/viewvc/openmsx?view=rev&amp;revision=12894</link>
#   <description><![CDATA[m9710797 committed revision 12894 to the openMSX SVN repository, changing 2 files]]></description>
#   <content:encoded><![CDATA[<p>2012-10-01 05:12:58 - <strong>m9710797 committed revision 12894 to the openMSX SVN repository, changing 2 files</strong></p>]]></content:encoded>
#   <pubDate>Mon, 01 Oct 2012 12:12:58 +0000</pubDate>

# <title><![CDATA[manuelbi made 2 file-release changes]]></title>
# <link>http://sourceforge.net/projects/openmsx</link>
# <description><![CDATA[manuelbi made 2 file-release changes]]></description>
# <content:encoded><![CDATA[<p>2012-10-01 00:28:02 - <strong>manuelbi made 2 file-release changes</strong></p>]]></content:encoded>
# <pubDate>Mon, 01 Oct 2012 07:28:02 +0000</pubDate>

# <title><![CDATA[manuelbi created the openMSX 0.9.1 released news entry]]></title>
# <link>http://sourceforge.net/news/?group_id=38274</link>
# <description><![CDATA[manuelbi created the openMSX 0.9.1 released news entry]]></description>
# <content:encoded><![CDATA[<p>2012-09-30 14:33:54 - <strong>manuelbi created the openMSX 0.9.1 released news entry</strong></p>]]></content:encoded>
# <pubDate>Sun, 30 Sep 2012 21:33:54 +0000</pubDate>

TIMEOUT = 60
COMMITTERS = {
  'bifimsx' => 'BiFi',
  'm9710797' => 'Wouter',
  'manuelbi' => 'Quibus',
  'vampier'  => 'Vampier',
  'mthuurne' => 'mth',
}
def feed_entry_report(entry)
  if matchdata = entry.title.match(/(\S+) committed revision (\d+) to the (.+) SVN repository(, changing (\d) files)?/)
    type = :commit
    committer = matchdata[1]
    revision = matchdata[2]
    repo = matchdata[3]
    number_of_files_changed = (matchdata[5]||0)
    svn_log = ''
    svn_url = "https://openmsx.svn.sourceforge.net/svnroot/openmsx/#{repo.downcase}/trunk"
    cmd = "svn log -v --xml --with-all-revprops -r #{revision} #{svn_url}"
    Timeout::timeout(TIMEOUT) {
      svn_log = Nokogiri::XML(`#{cmd}`)
    }
    files_changed = svn_log.css('path').map{|el|"[#{el['action']}] '#{el.text}'"}
    commit_message = svn_log.css('logentry msg').text
    commit_message_lines = commit_message.split("\n").select{|l|!l.empty?}
    # shortened = commit_message_lines.size > 3 ? true : false
    # sanitised_commit_message_lines = commit_message_lines[0,3].map{|line|line.split(/.{200}/).join("\n")}.join("\n").split("\n")
    # shortened ||= sanitised_commit_message_lines.size > 3 ? true : false
    # commit_message_sanitised = sanitised_commit_message_lines[0,3].join("\n")
    shortened = commit_message_lines.size > 1 ? true : false
    commit_message_sanitised = commit_message_lines.first
    commit_message_sanitised += '[...]' if shortened
    message = <<-COMMIT_EOS
[SVN][#{CONTROL_CODES[:bold]}#{repo}#{CONTROL_CODES[:normal]}] #{CONTROL_CODES[:colour]}3#{COMMITTERS[committer]||committer}#{CONTROL_CODES[:normal]} committed revision#{CONTROL_CODES[:colour]}3 #{revision}#{CONTROL_CODES[:normal]}.
#{CONTROL_CODES[:bold]}#{commit_message_sanitised}#{CONTROL_CODES[:normal]}
#{files_changed.size} file#{'s' if files_changed.size != 1} changed: #{files_changed[0,5].join(', ')}#{" and #{files_changed.size - 5} others" if files_changed.size > 5}.
    COMMIT_EOS
  elsif matchdata = entry.title.match(/(\S+) made (\d+) file-release changes/)
    type = :file_release_change
    committer = matchdata[1]
    number_of_changes = matchdata[2]
    message = "[PROJECT] #{COMMITTERS[committer]} made #{number_of_changes} file-release changes."
  elsif matchdata = entry.title.match(/(\S+) created the (.+) news entry/)
    type = :new_news_entry
    committer = matchdata[1]
    news_entry_title = matchdata[2]
    message = "[NEWS] #{COMMITTERS[committer]} created a news entry titled: #{news_entry_title}."
  else
    type = :unknown
    message = "[UNKNOWN] #{entry.title}"
  end
  response = "[#{entry.published}] #{message}\n"
  response += entry.url
  response
end

bot = Cinch::Bot.new do
  configure do |c|
    c.server = "irc.freenode.org"
    c.nick = "openMSX"
    c.channels = ["#openmsx"]
  end
  on :message, "!svn" do |m|
    m.reply "openMSX: svn co https://openmsx.svn.sourceforge.net/svnroot/openmsx openmsx"
    m.reply "openMSX Debugger: svn co https://openmsx.svn.sourceforge.net/svnroot/openmsx openmsx-debugger"
    m.reply "openMSX Catapult: svn co https://openmsx.svn.sourceforge.net/svnroot/openmsx catapult"
    m.reply "openMSX WxCatapult: svn co https://openmsx.svn.sourceforge.net/svnroot/openmsx wxcatapult"
  end
  on :message, "!latest" do |m|
    m.reply "Latest files available from: http://sourceforge.net/projects/openmsx/files/latest/download?source=files"
  end
  on :message, "!daily" do |m|
    m.reply "Latest Daily Builds:"
    m.reply "Mac: " + Nokogiri::HTML(open('http://openmsx.fixato.net/builds/mac/universal/')).css('tr td a')[3]['href']
    m.reply "Mac Debugger: " + Nokogiri::HTML(open('http://openmsx.fixato.net/builds/mac/debugger/')).css('tr td a')[3,2].map{|el|el['href']}.join(" - ")
    m.reply "Windows 32-bits: " + Nokogiri::HTML(open('http://openmsx.fixato.net/builds/windows/x86/')).css('tr td a')[3]['href']
    m.reply "Windows 64-bits: " + Nokogiri::HTML(open('http://openmsx.fixato.net/builds/windows/x64/')).css('tr td a')[3]['href']
  end
  on :message, "!handlers" do |m|
    m.bot.handlers.each{|h| m.reply h.to_s}
  end
  on :message, "!start rss monitoring" do |m|
    if @thread && @thread.alive?
      m.reply "Hello, #{m.user.nick}. The RSS feed is already being monitored."
    else
      @feed = Feedzirra::Feed.fetch_and_parse("https://sourceforge.net/export/rss2_keepsake.php?group_id=38274")
      if @feed.kind_of?(Fixnum)
        m.reply "Error with feed: #{@feed}"
      else
        m.reply "Last entry was: "
        m.reply feed_entry_report(@feed.entries.first)
      end
      @thread = Thread.new do
        loop do 
          # m.reply "Updating feed"
          updated_feed = Feedzirra::Feed.update(@feed)
          # m.reply updated_feed
          if updated_feed.new_entries.size > 0
            m.reply "#{updated_feed.new_entries.size} new entries found!"
            updated_feed.new_entries.reverse.each do |entry|
              m.reply feed_entry_report(entry)
            end
          else
            # m.reply "#{updated_feed.new_entries.size} no new entries found :("
          end
          sleep (5 * 60)
        end
      end
    end
  end
end

bot.start

