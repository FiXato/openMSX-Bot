#!/usr/bin/env ruby
# encoding: utf-8
require 'cinch'
require 'feedjira'
require 'yaml'
require 'nokogiri'
require 'timeout'
require 'open-uri'
require_relative 'cinch_ext.rb'
include CinchExt
#   <title><![CDATA[m9710797 committed revision 12894 to the openMSX SVN repository, changing 2 files]]></title>
#   <link>http://openmsx.svn.sourceforge.net/viewvc/openmsx?view=rev&amp;revision=12894</link>
#   <description><![CDATA[m9710797 committed revision 12894 to the openMSX SVN repository, changing 2 files]]></description>
#   <content:encoded><![CDATA[<p>2012-10-01 05:12:58 - <strong>m9710797 committed revision 12894 to the openMSX SVN repository, changing 2 files</strong></p>]]></content:encoded>
#   <pubDate>Mon, 01 Oct 2012 12:12:58 +0000</pubDate>

# <title><![CDATA[manuelbi made 2 file-release changes]]></title>
# <link>http://sourceforge.net/projects/openmsx</link>
# <description><![CDATA[manuelbi made 2 file-release changes]]></description>
# <content:encoded><![CDATA[<p>2012-10-01 00:28:02 - <strong>manuelbi made 2 file-release changes</strong></p>]]></content:encoded>
# <pubDate>Mon, 01 Oct 2012 07:28:02 +0000</pubDate>

# <title><![CDATA[manuelbi created the openMSX 0.9.1 released news entry]]></title>
# <link>http://sourceforge.net/news/?group_id=38274</link>
# <description><![CDATA[manuelbi created the openMSX 0.9.1 released news entry]]></description>
# <content:encoded><![CDATA[<p>2012-09-30 14:33:54 - <strong>manuelbi created the openMSX 0.9.1 released news entry</strong></p>]]></content:encoded>
# <pubDate>Sun, 30 Sep 2012 21:33:54 +0000</pubDate>

# <description><![CDATA[bifimsx committed revision 13076 to the openMSX SVN repository, changing 1 files]]></description>
$BOT_MANAGERS = %w[bifi quibus vampier hap mth wouter_ wouterv fixato fix]

def pagetitle(url)
  url = url.to_s.strip
  return 'Invalid url' if url == ''
  
  begin
    doc = nil
    Timeout.timeout(15) { doc = open(url, "User-Agent" => "PageTitle Retriever - Ruby/#{RUBY_VERSION}") }
    title = Nokogiri::HTML(doc).title
    if title.nil?
      return [doc.base_uri,doc.content_type].join(' ')
    end
    title.gsub!(/[\s\r\n\t]+/,' ') rescue title
    return title
  rescue Errno::ENOENT
    'PageTitleError: ENOENT'
  rescue OpenURI::HTTPError, RuntimeError => e
    return ['PageTitleError:', (doc.base_uri rescue url), (doc.content_type rescue ''), e.class.name].join(' ')
  rescue Timeout::Error
    return 'Page Title Retrieval Timed Out'
  end
end

class RssMonitor
  attr_accessor :recipient, :bot, :last_entry, :latest_entries, :silent
  TIMEOUT = 30
  COMMITTERS = {
    'bifimsx' => 'BiFi',
    'm9710797' => 'Wouter',
    'manuelbi' => 'Quibus',
    'vampier'  => 'Vampier',
    'mthuurne' => 'mth',
    'fixato'   => 'Filip H.F. "FiXato" Slagter'
  }
#  SVN_URL = "https://openmsx.svn.sourceforge.net/svnroot/openmsx/"
  # SVN_URL = "http://svn.code.sf.net/p/openmsx/code/openmsx/trunk"
#  FEED_URL = "http://sourceforge.net/export/rss2_keepsake.php?group_id=38274"
  ACTIVITY_FEED_URL = "http://sourceforge.net/p/openmsx/activity/feed"
  # FEED_URL = "https://sourceforge.net/p/openmsx/openmsx/feed"
  GIT_FEED_URL = "https://sourceforge.net/p/openmsx/feed"

  def feed_urls
    {'Git' => GIT_FEED_URL, 'Activity' => ACTIVITY_FEED_URL}
  end

  def initialize()
    @last_entry = {}
    @latest_entries = {}
    @silent = false
  end

  def committer_name(committer)
    COMMITTERS[committer]||committer
  end

  def feed_entry_report(entry,feed_type=nil)
    p entry
    p feed_type
    if feed_type == 'Git'
      if entry.url.include?('/ci/')
        type = :commit
        repo = entry.url.split('/')[5]
        repos = {
          'wxcatapult' => 'wxCatapult',
          'openmsx' => 'openMSX',
          'catapult' => 'Catapult',
          'package-windows' => 'openMSX Win 32 Packaging Project',
          'debugger' => 'openMSX Debugger',
          'website' => 'openMSX.SF.net',
          'htdocs' => 'Website',
        }
        repo = repos[repo] rescue repo
        message = '[GIT/%s] %s' % [repo, entry.title]
      elsif entry.url.include?('/bugs/')
        type = :bug_report
        message = '[TRACKER/BUG] %s' % entry.title
      elsif entry.url.include?('/feature-requests/')
        type = :feature_request
        message = '[TRACKER/FEATURE] %s' % entry.title
        puts "#{type}: #{message}"
        return nil
      elsif entry.url.include?('/support-requests/')
        type = :support_request
        message = '[TRACKER/SUPPORT] %s' % entry.title
      elsif entry.url.include?('/patches/')
        type = :patches
        message = '[TRACKER/PATCH] %s' % entry.title
      elsif entry.url.include?('/news/')
        type = :patches
        message = '[PROJECT/NEWS] %s' % entry.title
      else
        type = :unknown
        message = '[UNKNOWN] %s' % entry.title
      end
      p message
    elsif matchdata = entry.title.match(/(\S+) committed revision (\d+) to the (.+) SVN repository(, changing (\d+) files)?/)
      puts "Commit type"
      return nil
      # type = :commit
  #     committer = matchdata[1]
  #     revision = matchdata[2]
  #     repo = matchdata[3]
  #     number_of_files_changed = (matchdata[5]||0)
  #     svn_log = ''
  #     #svn_url = "https://openmsx.svn.sourceforge.net/svnroot/openmsx/#{repo.downcase}/trunk"
  #     svn_url = SVN_URL
  #     puts "SVN: #{svn_url}"
  #     cmd = "svn log -v --xml --with-all-revprops -r #{revision} #{svn_url}"
  #     puts cmd
  #     Timeout::timeout(TIMEOUT) {
  #       svn_log = Nokogiri::XML(`#{cmd}`)
  #     }
  #     puts svn_log
  #     files_changed = svn_log.css('path').map{|el|"[#{el['action']}] '#{el.text}'"}
  #     commit_message = svn_log.css('logentry msg').text
  #     commit_message_lines = commit_message.split("\n").select{|l|!l.empty?}
  #     # shortened = commit_message_lines.size > 3 ? true : false
  #     # sanitised_commit_message_lines = commit_message_lines[0,3].map{|line|line.split(/.{200}/).join("\n")}.join("\n").split("\n")
  #     # shortened ||= sanitised_commit_message_lines.size > 3 ? true : false
  #     # commit_message_sanitised = sanitised_commit_message_lines[0,3].join("\n")
  #     shortened = commit_message_lines.size > 1 ? true : false
  #     commit_message_sanitised = commit_message_lines.first
  #     commit_message_sanitised += '[...]' if shortened
  #     message = <<-COMMIT_EOS
  # [SVN][#{CONTROL_CODES[:bold]}#{repo}#{CONTROL_CODES[:normal]}] #{CONTROL_CODES[:colour]}3#{committer_name(committer)}#{CONTROL_CODES[:normal]} committed revision#{CONTROL_CODES[:colour]}3 #{revision}#{CONTROL_CODES[:normal]}.
  # #{CONTROL_CODES[:bold]}#{commit_message_sanitised}#{CONTROL_CODES[:normal]}
  # #{files_changed.size} file#{'s' if files_changed.size != 1} changed: #{files_changed[0,5].join(', ')}#{" and #{files_changed.size - 5} others" if files_changed.size > 5}.
  #     COMMIT_EOS
    elsif matchdata = entry.title.match(/(\S+) made (\d+) file-release changes/)
      type = :file_release_change
      committer = matchdata[1]
      number_of_changes = matchdata[2]
      message = "[PROJECT] #{committer_name(committer)} made #{number_of_changes} file-release changes."
    elsif matchdata = entry.title.match(/(\S+) changed the public information on the (.+) project/)
      type = :project_public_info_change
      committer = matchdata[1]
      project = matchdata[2]
      message = "[PROJECT] #{committer_name(committer)} made changes to the public information of the #{project} project page."
    elsif matchdata = entry.title.match(/(\S+) created the (.+) news entry/)
      type = :new_news_entry
      committer = matchdata[1]
      news_entry_title = matchdata[2]
      message = "[NEWS] #{committer_name(committer)} created a news entry titled: #{news_entry_title}."
    elsif matchdata = entry.title.match(/(\S+) commented on the (.+) forum thread/)
      type = :new_forum_reply
      committer = matchdata[1]
      forum_reply_title = matchdata[2]
      message = "[FORUM] #{committer_name(committer)} replied to the forum thread: #{forum_reply_title}."
    elsif matchdata = entry.title.match(/(\S+) commented on the (.+) artifact/)
      type = :new_tracker_reply
      committer = matchdata[1]
      tracker_reply_title = matchdata[2]
      message = "[TRACKER] #{committer_name(committer)} replied to the tracker item: #{tracker_reply_title}."
    elsif matchdata = entry.title.match(/(\S+) created the (.+) artifact/)
      type = :new_tracker_item
      committer = matchdata[1]
      tracker_item_title = matchdata[2]
      message = "[TRACKER] #{committer_name(committer)} created a tracker item: #{tracker_item_title}."
    elsif matchdata = entry.title.match(/(\S+) committed \[(\S+)\]/)
      type = :new_commit
      committer = matchdata[1]
      tracker_item_title = matchdata[2]
      message = "" #[TRACKER] #{committer_name(committer)} created a tracker item: #{tracker_item_title}."
      return ""
    elsif entry.url.include?('http://sourceforge.net/p/openmsx/feature-requests/')
      type = :new_tracker_ticket_comment
      message = "[TRACKER/FEATURE] #{entry.title} (#{pagetitle(entry.url)}): #{entry.summary}"
    else
      type = :unknown
      p entry
      message = "[UNKNOWN] #{entry.title}"
    end
    puts "Entry url: #{entry.url.inspect rescue 'error'}"
    puts "Feed type: #{feed_type.inspect rescue 'error'}"
    puts "Entry type: #{type.inspect rescue 'error'}"
    puts "Published: #{entry.published.inspect rescue 'error'}"
    puts "Message: #{message.inspect rescue 'error'}"
    response = "[#{entry.published.to_s.strip}] #{message.to_s.strip}\n"
    response += entry.url
    response
  end

  def reply_msg(msg)
    puts msg
    return if @silent
    if bot
      bot.channels.uniq.each do |channel|
        puts channel.to_s.downcase
        channel.msg msg if %w[#openmsx #nomedia].include?(channel.to_s.downcase)
      end
    end
  end

  def update_buildlog
    new_buildlog = open("http://vampier.fixato.org/buildlog/error.txt").read.strip
    @buildlog = new_buildlog if new_buildlog #Don't update the buildlog if there is an error
  end

  # Returns true when buildlog was updated
  def buildlog_updated?
    old_buildlog = buildlog
    update_buildlog
    buildlog && buildlog != old_buildlog
  end

  def buildlog
    update_buildlog if @buildlog.nil?
    @buildlog
  end

  def update_and_report_feed(curr_feed_type, curr_feed)
    # @recipient.reply "Updating feed"
    puts "Updating #{curr_feed_type} feed"
    updated_feed = Feedjira::Feed.update(curr_feed)

    # @recipient.reply updated_feed
    puts updated_feed
    if updated_feed.kind_of?(Fixnum)
      puts "Error with #{curr_feed_type} feed: #{updated_feed}"
    elsif updated_feed.new_entries.size > 0
      begin
        # @recipient.reply "#{updated_feed.new_entries.size} new entries found!"
        puts "#{updated_feed.new_entries.size} new entries found!"
        @last_entry[curr_feed_type] = updated_feed.entries.first
        @latest_entries[curr_feed_type] ||= []
        @latest_entries[curr_feed_type].unshift(*updated_feed.entries)
        @latest_entries[curr_feed_type] = @latest_entries[curr_feed_type].take(10)
        updated_feed.new_entries.reverse.each do |entry|
          message = feed_entry_report(entry,curr_feed_type).to_s.strip
          reply_msg message unless message.empty?
        end
      rescue => e
        reply_msg "Error while updating feed: #{e.message}"
        reply_msg e.backtrace[0..2].inspect
      ensure
        @feeds[curr_feed_type] = updated_feed
        @feeds[curr_feed_type].new_entries = []
      end
    else
      puts "#{updated_feed.new_entries.size} no new entries found :("
      # @recipient.reply "#{updated_feed.new_entries.size} no new entries found :("
    end
  end

  def update_vampier_buildlog
    puts "Updating Vampier buildlog"
    if buildlog_updated?
      last_error = buildlog.split("\n").first.to_i rescue nil
      puts "buildlog: #{buildlog} -- rev: #{last_error}"
      reply_msg("Windows Build System detected an error while compiling revision #{last_error}: http://vampier.fixato.org/buildlog/logs/openMSXCompileRevision-#{last_error}.log") if last_error > 0
    end
  end

  def monitor_rss
    puts "Fetching activity feed at #{ACTIVITY_FEED_URL}"
    @feed = Feedjira::Feed.fetch_and_parse(ACTIVITY_FEED_URL)
    puts "Fetching feed at #{GIT_FEED_URL}"
    @new_feed = Feedjira::Feed.fetch_and_parse(GIT_FEED_URL)
    @feeds = {'Git' => @new_feed, 'Activity' => @feed}
    @feeds.each do |curr_feed_type, curr_feed|
      puts "Checking #{curr_feed_type} feed"
      if curr_feed.kind_of?(Fixnum)
        reply_msg "Error with #{curr_feed_type} feed: #{curr_feed}"
      else
        @last_entry[curr_feed_type] = curr_feed.entries.first
        @latest_entries[curr_feed_type] ||= []
        @latest_entries[curr_feed_type].unshift(*curr_feed.entries)
        @latest_entries[curr_feed_type] = @latest_entries[curr_feed_type].take(10)
        reply_msg "Last entry was: "
        reply_msg @latest_entries[curr_feed_type].map{|entry|feed_entry_report(entry,curr_feed_type)}.compact.first
      end
    end
    $thread = Thread.new do
      loop do 
        begin
          @feeds.each do |curr_feed_type, curr_feed|
            begin
              status = Timeout::timeout(3 * 60) {update_and_report_feed(curr_feed_type, curr_feed)}
            rescue Timeout::Error
              puts "#update_and_report_feed(#{curr_feed_type}, #{curr_feed}) timed out. It ran longer than #{3 * 60} seconds. Skipping to next feed"
              next
            end
          end
          begin
            status = Timeout::timeout(3 * 60){update_vampier_buildlog}
          rescue Timeout::Error
            puts "#update_vampier_buildlog timed out. It ran longer than #{3 * 60} seconds. Skipping to sleep cycle now."
          end
          puts "Slept for #{sleep (3 * 60)}"
        rescue Exception => e
          puts e.class.name
          puts e.message
          puts e
          puts e.backtrace
        end
      end
    end
  end
end

$rss_monitor = RssMonitor.new
$rss_monitor.monitor_rss

def latest_build_for(url)
  URI.join(url, URI.encode(Nokogiri::HTML(open(url)).css('tr td a')[3]['href'])).to_s
end

bot = Cinch::Bot.new do
  configure do |c|
    c.server = "irc.freenode.org"
    c.port = 7000
    c.ssl.use = true
    c.nick = "openMSX"
    c.user = "openMSX"
    c.channels = ["#openmsx", '#nomedia']
  end

  on :message, /.?/ do |m|
    unless $thread.alive?
      $thread.kill
      $thread.join
      $rss_monitor.monitor_rss
    end
  end

  # on :message, "!svn" do |m|
  #   m.reply "openMSX: svn co #{RssMonitor::SVN_URL} openmsx"
  #   m.reply "openMSX Debugger: svn co #{RssMonitor::SVN_URL} openmsx-debugger"
  #   m.reply "openMSX Catapult: svn co #{RssMonitor::SVN_URL} catapult"
  #   m.reply "openMSX WxCatapult: svn co #{RssMonitor::SVN_URL} wxcatapult"
  # end

  # on :message, "!git" do |m|
  #   m.reply "You can also use git-svn to clone the repo (though be prepared to wait for a long time for it to finish the initial checkout): git svn clone #{RssMonitor::SVN_URL}"
  # end
  on :message, "!latest" do |m|
    m.reply "Latest files available from: http://sourceforge.net/projects/openmsx/files/latest/download?source=files"
  end
  on :message, "!daily" do |m|
    m.reply "Latest Daily Builds:"
    m.reply "Mac: " + latest_build_for('http://openmsx.fixato.net/builds/mac/universal/')
    m.reply "Mac Debugger: " + Nokogiri::HTML(open(base_url = 'http://openmsx.fixato.net/builds/mac/debugger/')).css('tr td a')[3,2].map{|el|href = el['href']; URI.join(base_url, URI.encode(href)).to_s}.join(" - ")
    m.reply "Windows 32-bits: " + latest_build_for('http://openmsx.fixato.net/builds/windows/x86/')
    m.reply "Windows 64-bits: " + latest_build_for('http://openmsx.fixato.net/builds/windows/x64/')
    m.reply "Dingux: " + latest_build_for('http://openmsx.fixato.net/builds/dingux/')
    m.reply "Android: " + latest_build_for('http://openmsx.fixato.net/builds/android/')
  end
  on :message, "!handlers" do |m|
    m.bot.handlers.each{|h| m.reply h.to_s}
  end

  on :message, "!help" do |m|
    m.reply "Available commands: !latest, !daily, !last rss, !compilation guide, !faq, !forums, !commands, !setup guide, !roms, !diskmanipulator, !catapult, !keys, !renderers, !docs, !manual, !recent rss entries, !recent activity rss entries, !recent git rss entries, !feed urls"
  end

  on :message, "!github" do |m|
    m.reply "This bot's source can be downloaded from https://github.com/FiXato/openMSX-Bot and you are free to fork it and send in features via pull-requests." 
  end

  on :message, "!last rss" do |m|
    if $rss_monitor.latest_entries.keys.size > 0
      # @.map{|feed_type, feed_entry| feed_entry_report(feed).strip}
      $rss_monitor.latest_entries.each do |feed_type, entries|
        message = entries.map{|entry| $rss_monitor.feed_entry_report(entry,feed_type)}.compact.first
        m.reply '[%s] %s' % [feed_type, message] unless message.to_s.strip.empty?
      end
    else
      m.reply "No last rss feed entries found. Maybe start RSS monitoring first."
    end
  end

  on :message, "!feed urls" do |m|
    m.reply $rss_monitor.feed_urls.map{|k,url|"#{k}: #{url}"}.join(" — ")
  end

  on :message, /!recent (\S*) ?rss entries/ do |m,feed_type|
    puts "Fetching activity feed at #{RssMonitor::ACTIVITY_FEED_URL}"
    @feed = Feedjira::Feed.fetch_and_parse(RssMonitor::ACTIVITY_FEED_URL)
    puts "Fetching feed at #{RssMonitor::GIT_FEED_URL}"
    @new_feed = Feedjira::Feed.fetch_and_parse(RssMonitor::GIT_FEED_URL)
    @feeds = {'Git' => @new_feed, 'Activity' => @feed}
    @feeds.select!{|k,v|k.downcase == feed_type.to_s.downcase.strip} if feed_type.to_s != ''
    @feeds.each do |curr_feed_type, curr_feed|
      puts "Checking #{curr_feed_type} feed"
      if curr_feed.kind_of?(Fixnum)
        reply_msg "Error with #{curr_feed_type} feed: #{curr_feed}"
      else
        m.reply "Current #{curr_feed.entries.size} #{curr_feed_type} RSS entries are:"
        curr_feed.entries.each do |entry|
          m.reply RssMonitor.new.feed_entry_report(entry,curr_feed_type).to_s.strip
        end
      end
    end
  end

  on :message, "!docs" do |m|
    m.reply "The openMSX documentation is located at http://openmsx.sourceforge.net/docs.php"
  end

  on :message, "!manual" do |m|
    m.reply "The openMSX manuals are located at http://openmsx.sourceforge.net/manual/ and the user manual at http://openmsx.sourceforge.net/manual/user.html"
  end

  on :message, "!compilation guide" do |m|
    m.reply "The compilation guide can be found at: http://openmsx.sourceforge.net/manual/compile.html"
  end

  on :message, "!faq" do |m|
    m.reply "The Frequently Asked Questions and their answers can be found at: http://openmsx.sourceforge.net/manual/faq.html"
  end

  on :message, "!forums" do |m|
    m.reply "We have 2 forums. One over at SourceForge: http://sourceforge.net/projects/openmsx/forums and one at MRC: http://www.msx.org/forum/semi-msx-talk/openmsx"
  end

  on :message, "!commands" do |m|
    m.reply "An overview of the console commands is available at: http://openmsx.sourceforge.net/manual/commands.html"
  end

  on :message, "!setup guide" do |m|
    m.reply "The setup guide can be found at: http://openmsx.sourceforge.net/manual/setup.html"
  end

  on :message, "!roms" do |m|
    m.reply "openMSX only comes with the C-BIOS system roms: http://openmsx.sourceforge.net/manual/faq.html#c-bios"
    m.reply "Why? Read http://openmsx.sourceforge.net/manual/faq.html#roms"
  end

  on :message, "!diskmanipulator" do |m|
    m.reply "The diskmanipulator manual is available at http://openmsx.sourceforge.net/manual/diskmanipulator.html"
  end

  on :message, "!catapult" do |m|
    m.reply "Catapult has its own manual and compilation guide at http://openmsx.sourceforge.net/catapult-manual/"
  end

  on :message, "!keys" do |m|
    m.reply "The default keymappings for PC, Mac and Dingoo are listed at http://openmsx.sourceforge.net/manual/user.html#keyboard"
  end

  on :message, "!renderers" do |m|
    m.reply "Information about the renderers is available at http://openmsx.sourceforge.net/manual/user.html#renderers"
  end

  on :message, "!todo" do |m|
    m.reply "The openMSX 'TODO Before Release' list is available at https://sourceforge.net/apps/mediawiki/openmsx/index.php?title=TODO_before_next_release"
  end

  on :message, "!silence" do |m|
    return unless $BOT_MANAGERS.include?(m.user.nick.downcase)
    m.reply "My RSS monitor will go silent now."
    $rss_monitor.silent = true
  end

  on :message, "!wake up" do |m|
    return unless $BOT_MANAGERS.include?(m.user.nick.downcase)
    $rss_monitor.silent = false
    m.reply "My RSS monitor is woken up again."
  end

  # on :message, "!start silent rss monitoring" do |m|
  #   $rss_monitor.recipient = m.dup
  #   m.reply "Started"
  #   # if $thread && $thread.alive?
  #   #   m.reply "Hello, #{m.user.nick}. The RSS feed is already being monitored. Current thread status: #{$thread.status}"
  #   # else
  #   #   Thread.new{monitor_rss}
  #   # end
  # end

  # on :message, "!start rss monitoring" do |m|
  #   $rss_monitor.recipient = m.dup
  #   # if $thread && $thread.alive?
  #     # m.reply "Hello, #{m.user.nick}. The RSS feed is already being monitored. Current thread status: #{$thread.status}"
  #     if $rss_monitor.last_entry
  #       m.reply $rss_monitor.report_last_entry
  #     else
  #       m.reply "No last rss feed entry found."
  #     end
  #   # end
  # end
end
$rss_monitor.bot = bot
bot.start

