#!/usr/bin/env ruby
# encoding: utf-8
require 'cinch'
require 'feedzirra'
require 'yaml'
require 'nokogiri'
require 'timeout'
require 'open-uri'
require_relative 'cinch_ext.rb'
include CinchExt
#   <title><![CDATA[m9710797 committed revision 12894 to the openMSX SVN repository, changing 2 files]]></title>
#   <link>http://openmsx.svn.sourceforge.net/viewvc/openmsx?view=rev&amp;revision=12894</link>
#   <description><![CDATA[m9710797 committed revision 12894 to the openMSX SVN repository, changing 2 files]]></description>
#   <content:encoded><![CDATA[<p>2012-10-01 05:12:58 - <strong>m9710797 committed revision 12894 to the openMSX SVN repository, changing 2 files</strong></p>]]></content:encoded>
#   <pubDate>Mon, 01 Oct 2012 12:12:58 +0000</pubDate>

# <title><![CDATA[manuelbi made 2 file-release changes]]></title>
# <link>http://sourceforge.net/projects/openmsx</link>
# <description><![CDATA[manuelbi made 2 file-release changes]]></description>
# <content:encoded><![CDATA[<p>2012-10-01 00:28:02 - <strong>manuelbi made 2 file-release changes</strong></p>]]></content:encoded>
# <pubDate>Mon, 01 Oct 2012 07:28:02 +0000</pubDate>

# <title><![CDATA[manuelbi created the openMSX 0.9.1 released news entry]]></title>
# <link>http://sourceforge.net/news/?group_id=38274</link>
# <description><![CDATA[manuelbi created the openMSX 0.9.1 released news entry]]></description>
# <content:encoded><![CDATA[<p>2012-09-30 14:33:54 - <strong>manuelbi created the openMSX 0.9.1 released news entry</strong></p>]]></content:encoded>
# <pubDate>Sun, 30 Sep 2012 21:33:54 +0000</pubDate>
class RssMonitor
  attr_accessor :recipient, :bot, :last_entry
  TIMEOUT = 60
  COMMITTERS = {
    'bifimsx' => 'BiFi',
    'm9710797' => 'Wouter',
    'manuelbi' => 'Quibus',
    'vampier'  => 'Vampier',
    'mthuurne' => 'mth',
    'fixato'   => 'Filip H.F. "FiXato" Slagter'
  }

  def committer_name(committer)
    COMMITTERS[committer]||committer
  end

  def feed_entry_report(entry)
    if matchdata = entry.title.match(/(\S+) committed revision (\d+) to the (.+) SVN repository(, changing (\d) files)?/)
      type = :commit
      committer = matchdata[1]
      revision = matchdata[2]
      repo = matchdata[3]
      number_of_files_changed = (matchdata[5]||0)
      svn_log = ''
      svn_url = "https://openmsx.svn.sourceforge.net/svnroot/openmsx/#{repo.downcase}/trunk"
      cmd = "svn log -v --xml --with-all-revprops -r #{revision} #{svn_url}"
      Timeout::timeout(TIMEOUT) {
        svn_log = Nokogiri::XML(`#{cmd}`)
      }
      files_changed = svn_log.css('path').map{|el|"[#{el['action']}] '#{el.text}'"}
      commit_message = svn_log.css('logentry msg').text
      commit_message_lines = commit_message.split("\n").select{|l|!l.empty?}
      # shortened = commit_message_lines.size > 3 ? true : false
      # sanitised_commit_message_lines = commit_message_lines[0,3].map{|line|line.split(/.{200}/).join("\n")}.join("\n").split("\n")
      # shortened ||= sanitised_commit_message_lines.size > 3 ? true : false
      # commit_message_sanitised = sanitised_commit_message_lines[0,3].join("\n")
      shortened = commit_message_lines.size > 1 ? true : false
      commit_message_sanitised = commit_message_lines.first
      commit_message_sanitised += '[...]' if shortened
      message = <<-COMMIT_EOS
  [SVN][#{CONTROL_CODES[:bold]}#{repo}#{CONTROL_CODES[:normal]}] #{CONTROL_CODES[:colour]}3#{committer_name(committer)}#{CONTROL_CODES[:normal]} committed revision#{CONTROL_CODES[:colour]}3 #{revision}#{CONTROL_CODES[:normal]}.
  #{CONTROL_CODES[:bold]}#{commit_message_sanitised}#{CONTROL_CODES[:normal]}
  #{files_changed.size} file#{'s' if files_changed.size != 1} changed: #{files_changed[0,5].join(', ')}#{" and #{files_changed.size - 5} others" if files_changed.size > 5}.
      COMMIT_EOS
    elsif matchdata = entry.title.match(/(\S+) made (\d+) file-release changes/)
      type = :file_release_change
      committer = matchdata[1]
      number_of_changes = matchdata[2]
      message = "[PROJECT] #{committer_name(committer)} made #{number_of_changes} file-release changes."
    elsif matchdata = entry.title.match(/(\S+) created the (.+) news entry/)
      type = :new_news_entry
      committer = matchdata[1]
      news_entry_title = matchdata[2]
      message = "[NEWS] #{committer_name(committer)} created a news entry titled: #{news_entry_title}."
    elsif matchdata = entry.title.match(/(\S+) commented on the (.+) forum thread/)
      type = :new_forum_reply
      committer = matchdata[1]
      forum_reply_title = matchdata[2]
      message = "[FORUM] #{committer_name(committer)} replied to the forum thread: #{forum_reply_title}."
    else
      type = :unknown
      p entry
      message = "[UNKNOWN] #{entry.title}"
    end
    response = "[#{entry.published.to_s.strip}] #{message.strip}\n"
    response += entry.url
    response
  end

  def report_last_entry
    feed_entry_report(@last_entry).strip
  end

  def reply_msg(msg)
    puts msg
    if bot
      bot.channels.each{|channel|puts channel.to_s.downcase; channel.msg msg if %w[#openmsx #nomedia].include?(channel.to_s.downcase)}
    end
    # unless @recipient
    #   puts "'#{@recipient}' recipient no longer available"
    #   return
    # end
    # @recipient.reply(msg)
  end

  def update_buildlog
    new_buildlog = open("http://108.67.190.32/buildlog").read.strip
    @buildlog = new_buildlog if new_buildlog #Don't update the buildlog if there is an error
  end

  # Returns true when buildlog was updated
  def buildlog_updated?
    old_buildlog = @buildlog
    update_buildlog
    buildlog && buildlog != old_buildlog
  end

  def buildlog
    update_buildlog if @buildlog.nil?
    @buildlog
  end

  def monitor_rss
    @feed = Feedzirra::Feed.fetch_and_parse("https://sourceforge.net/export/rss2_keepsake.php?group_id=38274")
    if @feed.kind_of?(Fixnum)
      reply_msg "Error with feed: #{@feed}"
    else
      @last_entry = @feed.entries.first
      reply_msg "Last entry was: "
      reply_msg feed_entry_report(@last_entry).strip
    end
    $thread = Thread.new do
      loop do 
        begin
          # @recipient.reply "Updating feed"
          puts "Updating feed"
          updated_feed = Feedzirra::Feed.update(@feed)
          # puts "Updating Vampier buildlog"
          # if buildlog_updated?
          #   last_error = File.readlines(buildlog).first.split(':').last rescue nil
          #   reply_msg("Vampier's build system detected an error while compiling: #{last_error}") if last_error
          # end

          # @recipient.reply updated_feed
          puts updated_feed
          if updated_feed.kind_of?(Fixnum)
            puts "Error with feed: #{updated_feed}"
          elsif updated_feed.new_entries.size > 0
            # @recipient.reply "#{updated_feed.new_entries.size} new entries found!"
            puts "#{updated_feed.new_entries.size} new entries found!"
            @last_entry = updated_feed.entries.first
            updated_feed.new_entries.reverse.each do |entry|
              message = feed_entry_report(entry).to_s.strip
              reply_msg message unless message.to_s.empty?
            end
            @feed = updated_feed
            @feed.new_entries = []
          else
            puts "#{updated_feed.new_entries.size} no new entries found :("
            # @recipient.reply "#{updated_feed.new_entries.size} no new entries found :("
          end
          puts "Slept for #{sleep (3 * 60)}"
        rescue Exception => e
          puts e.class.name
          puts e.message
          puts e
          puts e.backtrace
        end
      end
    end
  end
end

$rss_monitor = RssMonitor.new
$rss_monitor.monitor_rss
bot = Cinch::Bot.new do
  configure do |c|
    c.server = "irc.freenode.org"
    c.nick = "openMSX"
    c.channels = ["#openmsx", '#nomedia']
  end

  on :message, "!svn" do |m|
    m.reply "openMSX: svn co https://openmsx.svn.sourceforge.net/svnroot/openmsx openmsx"
    m.reply "openMSX Debugger: svn co https://openmsx.svn.sourceforge.net/svnroot/openmsx openmsx-debugger"
    m.reply "openMSX Catapult: svn co https://openmsx.svn.sourceforge.net/svnroot/openmsx catapult"
    m.reply "openMSX WxCatapult: svn co https://openmsx.svn.sourceforge.net/svnroot/openmsx wxcatapult"
  end
  on :message, "!latest" do |m|
    m.reply "Latest files available from: http://sourceforge.net/projects/openmsx/files/latest/download?source=files"
  end
  on :message, "!daily" do |m|
    m.reply "Latest Daily Builds:"
    m.reply "Mac: " + Nokogiri::HTML(open('http://openmsx.fixato.net/builds/mac/universal/')).css('tr td a')[3]['href']
    m.reply "Mac Debugger: " + Nokogiri::HTML(open('http://openmsx.fixato.net/builds/mac/debugger/')).css('tr td a')[3,2].map{|el|el['href']}.join(" - ")
    m.reply "Windows 32-bits: " + Nokogiri::HTML(open('http://openmsx.fixato.net/builds/windows/x86/')).css('tr td a')[3]['href']
    m.reply "Windows 64-bits: " + Nokogiri::HTML(open('http://openmsx.fixato.net/builds/windows/x64/')).css('tr td a')[3]['href']
    m.reply "Dingux: " + Nokogiri::HTML(open('http://openmsx.fixato.net/builds/dingux/')).css('tr td a')[3]['href']
  end
  on :message, "!handlers" do |m|
    m.bot.handlers.each{|h| m.reply h.to_s}
  end

  on :message, "!help" do |m|
    m.reply "Available commands: !svn, !latest, !daily, !last rss, !compilation guide, !faq, !commands, !setup guide, !roms, !diskmanipulator, !catapult, !keys, !renderers"
  end

  on :message, "!last rss" do |m|
    if $rss_monitor.last_entry
      m.reply $rss_monitor.report_last_entry
    else
      m.reply "No last rss feed entry found. Maybe start RSS monitoring first."
    end
  end

  on :message, "!compilation guide" do |m|
    m.reply "The compilation guide can be found at: http://openmsx.sourceforge.net/manual/compile.html"
  end

  on :message, "!faq" do |m|
    m.reply "The Frequently Asked Questions and their answers can be found at: http://openmsx.sourceforge.net/manual/faq.html"
  end

  on :message, "!commands" do |m|
    m.reply "An overview of the console commands is available at: http://openmsx.sourceforge.net/manual/commands.html"
  end

  on :message, "!setup guide" do |m|
    m.reply "The setup guide can be found at: http://openmsx.sourceforge.net/manual/setup.html"
  end

  on :message, "!roms" do |m|
    m.reply "openMSX only comes with the C-BIOS system roms: http://openmsx.sourceforge.net/manual/faq.html#c-bios"
    m.reply "Why? Read http://openmsx.sourceforge.net/manual/faq.html#roms"
  end

  on :message, "!diskmanipulator" do |m|
    m.reply "The diskmanipulator manual is available at http://openmsx.sourceforge.net/manual/diskmanipulator.html"
  end

  on :message, "!catapult" do |m|
    m.reply "Catapult has its own manual and compilation guide at http://openmsx.sourceforge.net/catapult-manual/"
  end

  on :message, "!keys" do |m|
    m.reply "The default keymappings for PC and Mac are listed at http://openmsx.sourceforge.net/manual/user.html#keyboard"
  end

  on :message, "!renderers" do |m|
    m.reply "Information about the renderers is available at http://openmsx.sourceforge.net/manual/user.html#renderers"
  end
  # on :message, "!start silent rss monitoring" do |m|
  #   $rss_monitor.recipient = m.dup
  #   m.reply "Started"
  #   # if $thread && $thread.alive?
  #   #   m.reply "Hello, #{m.user.nick}. The RSS feed is already being monitored. Current thread status: #{$thread.status}"
  #   # else
  #   #   Thread.new{monitor_rss}
  #   # end
  # end

  # on :message, "!start rss monitoring" do |m|
  #   $rss_monitor.recipient = m.dup
  #   # if $thread && $thread.alive?
  #     # m.reply "Hello, #{m.user.nick}. The RSS feed is already being monitored. Current thread status: #{$thread.status}"
  #     if $rss_monitor.last_entry
  #       m.reply $rss_monitor.report_last_entry
  #     else
  #       m.reply "No last rss feed entry found."
  #     end
  #   # end
  # end
end
$rss_monitor.bot = bot
bot.start

